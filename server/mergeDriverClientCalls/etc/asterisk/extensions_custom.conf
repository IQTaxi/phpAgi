;-----------------------------------------------------------------
; FreePBX Dialplan for Call Merge
; Add this to /etc/asterisk/extensions_custom.conf

# [call-merge-wait]
# ; This context handles the first call - waits for second party
# ; Conference room extension pattern for first caller
# exten => _XXXX,1,NoOp(First Call - Conference Room ${EXTEN})
# same => n,Set(CONFROOM=${EXTEN})
# same => n,Answer()
# same => n,Wait(2)
# same => n,Set(TIMEOUT(absolute)=120)
# same => n,Playback(pls-wait-connect-call)
# same => n,ConfBridge(${CONFROOM},default_bridge,default_user)
# same => n,Hangup()

# exten => _XXXXX,1,NoOp(First Call - Conference Room ${EXTEN})
# same => n,Set(CONFROOM=${EXTEN})
# same => n,Answer()
# same => n,Wait(2)
# same => n,Set(TIMEOUT(absolute)=120)
# same => n,Playback(pls-wait-connect-call)
# same => n,ConfBridge(${CONFROOM},default_bridge,default_user)
# same => n,Hangup()

# [call-merge]
# ; This context handles the second call - joins conference directly
# ; Conference room extension pattern for second caller
# exten => _XXXX,1,NoOp(Second Call - Conference Room ${EXTEN})
# same => n,Set(CONFROOM=${EXTEN})
# same => n,Answer()
# same => n,Wait(2)
# same => n,Set(TIMEOUT(absolute)=120)
# same => n,ConfBridge(${CONFROOM},default_bridge,default_user)
# same => n,Hangup()

# ; Alternative pattern for longer conference room numbers
# exten => _XXXXX,1,NoOp(Second Call - Conference Room ${EXTEN})
# same => n,Set(CONFROOM=${EXTEN})
# same => n,Answer()
# same => n,Wait(2)
# same => n,Set(TIMEOUT(absolute)=120)
# same => n,ConfBridge(${CONFROOM},default_bridge,default_user)
# same => n,Hangup()



[call-transfer-wait]
; This context handles the first call - waits for second party
; Uses a unique identifier instead of conference room
exten => _XXXX,1,NoOp(First Call - Transfer ID ${EXTEN})
same => n,Set(TRANSFER_ID=${EXTEN})
same => n,Answer()
same => n,Wait(2)
same => n,Set(TIMEOUT(absolute)=120)
same => n,Playback(pls-wait-connect-call)
same => n,Set(GLOBAL(CHANNEL_${TRANSFER_ID})=${CHANNEL})
same => n,MusicOnHold()
same => n,Hangup()

exten => _XXXXX,1,NoOp(First Call - Transfer ID ${EXTEN})
same => n,Set(TRANSFER_ID=${EXTEN})
same => n,Answer()
same => n,Wait(2)
same => n,Set(TIMEOUT(absolute)=120)
same => n,Playback(pls-wait-connect-call)
same => n,Set(GLOBAL(CHANNEL_${TRANSFER_ID})=${CHANNEL})
same => n,MusicOnHold()
same => n,Hangup()

[call-transfer-bridge]
; This context handles the second call - bridges with first call
; Uses transfer ID to find the first call
exten => _XXXX,1,NoOp(Second Call - Transfer ID ${EXTEN})
same => n,Set(TRANSFER_ID=${EXTEN})
same => n,Answer()
same => n,Wait(1)
same => n,Set(FIRST_CHANNEL=${GLOBAL(CHANNEL_${TRANSFER_ID})})
same => n,GotoIf($["${FIRST_CHANNEL}" = ""]?failed:bridge)
same => n(bridge),StopMusicOnHold(${FIRST_CHANNEL})
same => n,Bridge(${FIRST_CHANNEL},kKtT)
same => n,Hangup()
same => n(failed),Playback(call-failure)
same => n,Hangup()

; Alternative pattern for longer transfer IDs
exten => _XXXXX,1,NoOp(Second Call - Transfer ID ${EXTEN})
same => n,Set(TRANSFER_ID=${EXTEN})
same => n,Answer()
same => n,Wait(1)
same => n,Set(FIRST_CHANNEL=${GLOBAL(CHANNEL_${TRANSFER_ID})})
same => n,GotoIf($["${FIRST_CHANNEL}" = ""]?failed:bridge)
same => n(bridge),StopMusicOnHold(${FIRST_CHANNEL})
same => n,Bridge(${FIRST_CHANNEL},kKtT)
same => n,Hangup()
same => n(failed),Playback(call-failure)
same => n,Hangup()
same => n,Hangup()
