 [from-internal]
exten => _40XX,1,Set(UNIQ=${UNIQUEID})
;Change python with path installed python if problem
;Required python version: 3
same => n,Set(PYTHON=python3)
same => n,Set(CURRENT_EXTEN=${EXTEN})
same => n,Set(FILEBASE=/tmp/auto_register_call/${CURRENT_EXTEN}/${CALLERID(num)}/${UNIQ})
same => n,Set(MAX_RETRIES=2)
same => n,Set(READ_MAX_RETRIES=1)
;VALIDATE_DESTINATION =0 no validation, 1 validate destination address, 2 not validate destination return INVALID_DESTINATION_NAME on error
same => n,Set(VALIDATE_DESTINATION=0)
same => n,Set(INVALID_DESTINATION_NAME="ΑΓΝΩΣΤΟΣ")
same => n,Set(ADD_MATCHED_ADDRESS_PICKUP=0)
same => n,Set(LOG_PREFIX=[${UNIQ}])
same => n,System(echo "$(date) - ${LOG_PREFIX} Starting call processing for ${CALLERID(num)}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${CALLERID(num)}" = "anonymous"]?anonymous)
same => n,GotoIf($["${CALLERID(num)}" = ""]?anonymous)
same => n,GotoIf($["${CALLERID(num)}" = "unknown"]?anonymous)


; Define script paths and commands for easier maintenance
same => n,Set(SCRIPTS_PATH=/usr/local/bin)
same => n,Set(SAVE_JSON=${PYTHON} ${SCRIPTS_PATH}/save_json.py)
same => n,Set(READ_JSON=${PYTHON} ${SCRIPTS_PATH}/json_extractor.py)
same => n,Set(STT_SCRIPT=${PYTHON} ${SCRIPTS_PATH}/send_to_google_stt.py ${CURRENT_EXTEN})
same => n,Set(TTS_SCRIPT=${PYTHON} ${SCRIPTS_PATH}/send_to_google_tts.py ${CURRENT_EXTEN})
same => n,Set(DATE_PARSE_SCRIPT=${PYTHON} ${SCRIPTS_PATH}/parse_date.py ${CURRENT_EXTEN})
same => n,Set(VALIDATE_SCRIPT=${PYTHON} ${SCRIPTS_PATH}/validate.py)
same => n,Set(FETCH_LATLNG_SCRIPT=${PYTHON} ${SCRIPTS_PATH}/fetch_latlng_google_v4.py ${CURRENT_EXTEN})
same => n,Set(REGISTER_SCRIPT=${PYTHON} ${SCRIPTS_PATH}/register_call_v6.py ${CURRENT_EXTEN})
same => n,Set(GET_USER_SCRIPT=${PYTHON} ${SCRIPTS_PATH}/get_user.py ${CURRENT_EXTEN})
same => n,Set(EXTRACT_JSON_SCRIPT=${PYTHON} ${SCRIPTS_PATH}/extract_json_value.py)
same => n,Set(EXTEN_IN_CONFIG_SCRIPT=${PYTHON} ${SCRIPTS_PATH}/check_config.py)
same => n,Set(USER_COMMENTS="")
same => n,Set(WAV_GAIN=0)
same => n,Set(PICKUP_TRY=1)
same => n,Set(NAME_TRY=1)
same => n,Set(DEST_TRY=1)
same => n,Set(RESERVATION_TRY=1)
same => n,Set(IS_DEST_LOCATION_OK=0)
same => n,Set(RESERVATION_REQUEST=0)

same => n,Set(PHONE_TO_CALL=${SHELL(${EXTRACT_JSON_SCRIPT} "$(cat /usr/local/bin/config.json)" "${EXTEN}.failCallTo")})
same => n,Set(WELCOME_PLAYBACK=${SHELL(${EXTRACT_JSON_SCRIPT} "$(cat /usr/local/bin/config.json)" "${EXTEN}.welcomePlayback")})

same => n,GotoIf($[${LEN(${CALLERID(num)})} <= 5]?anonymous)

;Check for if exten exist in config file 
same => n,Set(EXTEN_EXIST=${SHELL(${EXTEN_IN_CONFIG_SCRIPT} ${CURRENT_EXTEN})})
same => n,GotoIf($[${EXTEN_EXIST} = 0]?fail)

same => n,System(echo "$(date) - ${LOG_PREFIX} Creating directory structure: ${FILEBASE}" >> "/tmp/asterisk_calls.log")
same => n,System(mkdir -p "${FILEBASE}/recordings")
same => n,System(echo "$(date) - ${LOG_PREFIX} Saving initial phone data to JSON" >> "/tmp/asterisk_calls.log")
same => n,System(${SAVE_JSON} "phone" ${CALLERID(num)} "${FILEBASE}/progress.json") 
same => n,System(echo "$(date) - ${LOG_PREFIX} Call started - UNIQUEID: ${UNIQ} - CALLERID: ${CALLERID(num)}" > "${FILEBASE}/log.txt")
same => n,Wait(1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Playing welcome message" >> "${FILEBASE}/log.txt")
same => n,Read(USER_CHOICE,${WELCOME_PLAYBACK},1,,${READ_MAX_RETRIES},3)
same => n,GotoIf($["${USER_CHOICE}" = "1"]?asap_call)
same => n,GotoIf($["${USER_CHOICE}" = "2"]?reservation_request)
same => n,GotoIf($["${USER_CHOICE}" = "3"]?goto_operator)
same => n,Wait(1)
same => n,Goto(goto_operator)

same => n(reservation_request),System(echo "Rerervation selected" >> "${FILEBASE}/log.txt")
same => n,Set(RESERVATION_REQUEST=1)
same => n,Goto(main_operation)

same => n(asap_call),System(echo "ASAP calls selected" >> "${FILEBASE}/log.txt")
same => n,Set(RESERVATION_REQUEST=0)

; --- EXISTING USER CHECK SECTION ---
same => n(main_operation),System(echo "$(date) - ${LOG_PREFIX} Checking for existing user data" >> "${FILEBASE}/log.txt")
same => n,StartMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Executing get_user script for ${CALLERID(num)}" >> "${FILEBASE}/log.txt")
same => n,Set(USER_JSON=${SHELL(${GET_USER_SCRIPT} "${CALLERID(num)}")})
same => n,StopMusicOnHold()
same => n,Set(ESCAPED_USER_JSON=${SHELL_ESCAPE(${USER_JSON})})
same => n,System(echo "$(date) - ${LOG_PREFIX} User data result: ${ESCAPED_USER_JSON}" >> "${FILEBASE}/log.txt")

; Parse JSON response For user data
same => n,System(echo "$(date) - ${LOG_PREFIX} Parsing user JSON data" >> "${FILEBASE}/log.txt")
same => n,Set(USER_NAME=${SHELL(${EXTRACT_JSON_SCRIPT} '${USER_JSON}' 'name')})
same => n,Set(USER_PICKUP=${SHELL(${EXTRACT_JSON_SCRIPT} '${USER_JSON}' 'pickup')})
same => n,Set(USER_LAT=${SHELL(${EXTRACT_JSON_SCRIPT} '${USER_JSON}' 'latLng.lat')})
same => n,Set(USER_LNG=${SHELL(${EXTRACT_JSON_SCRIPT} '${USER_JSON}' 'latLng.lng')})
same => n,Set(USER_COMMENTS=${SHELL(${EXTRACT_JSON_SCRIPT} '${USER_JSON}' 'comments')})
same => n,System(${SAVE_JSON} "comments" "${USER_COMMENTS}" "${FILEBASE}/progress.json")
same => n,Set(USER_BLOCKED=${SHELL(${EXTRACT_JSON_SCRIPT} '${USER_JSON}' 'doNotServe')})
same => n,System(${SAVE_JSON} "user_blocked" "${USER_BLOCKED}" "${FILEBASE}/progress.json")
same => n,Set(USER_BLOCKED=${SHELL(${READ_JSON} ${FILEBASE}/progress.json user_blocked 0 | head -1 | tr -d '\n\r ')})
same => n,GotoIf($["${USER_BLOCKED}" = "1"]?anonymous)
same => n,System(echo "$(date) - ${LOG_PREFIX} Extracted - Name: ${USER_NAME}, Pickup: ${USER_PICKUP}, Lat: ${USER_LAT}, Lng: ${USER_LNG}" >> "${FILEBASE}/log.txt")

; If we have name, save it to NAME_RESULT and to progress.json and dont ask it again
; Validate the existing USER_NAME
same => n,System(echo "$(date) - ${LOG_PREFIX} Validating existing user name: '${USER_NAME}'" >> "${FILEBASE}/log.txt")
same => n,Set(IS_NAME_OK=${SHELL(${VALIDATE_SCRIPT} "${USER_NAME}" | head -1 | tr -d '\n\r ')})
same => n,System(echo "$(date) - ${LOG_PREFIX} Name validation result: '${IS_NAME_OK}' for input: '${USER_NAME}'" >> "${FILEBASE}/log.txt")

; If validation is OK, save name and log it
same => n,GotoIf($["${IS_NAME_OK}" = "1"]?save_name)

; If not OK, skip saving and proceed (or handle error)
same => n,System(echo "$(date) - ${LOG_PREFIX} Name validation failed, proceeding to name collection" >> "${FILEBASE}/log.txt")
same => n,Goto(name_retry)

; Label to save name and log
same => n(save_name),System(echo "$(date) - ${LOG_PREFIX} Saving existing valid name: ${USER_NAME}" >> "${FILEBASE}/log.txt")
same => n,Set(NAME_CLEAN=${SHELL(echo "${USER_NAME}" | tr -d '\n\r')})
same => n,System(${SAVE_JSON} "name" "${NAME_CLEAN}" "${FILEBASE}/progress.json")
same => n,System(echo "$(date) - ${LOG_PREFIX} Using existing name from user data: ${USER_NAME}" >> "${FILEBASE}/log.txt")
same => n,Set(NAME_RESULT=${NAME_CLEAN})

same => n,System(echo "$(date) - ${LOG_PREFIX} Validating existing pickup address: ${USER_PICKUP}" >> "${FILEBASE}/log.txt")
same => n,Set(IS_PICKUP_OK=${SHELL(${VALIDATE_SCRIPT} "${USER_PICKUP}" | head -1 | tr -d '\n\r ')})
same => n,System(echo "$(date) - ${LOG_PREFIX} Pickup validation result: ${IS_PICKUP_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${IS_PICKUP_OK}" != "1"]?pickup_retry)

; We have both pickup address and location - offer to use them
same => n,System(echo "$(date) - ${LOG_PREFIX} Offering to use existing pickup address: ${USER_PICKUP}" >> "${FILEBASE}/log.txt")
same => n,StartMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Generating TTS for existing address confirmation" >> "${FILEBASE}/log.txt")
same => n,System(${TTS_SCRIPT} "Βρήκαμε μια προεπιλεγμένη διεύθυνση: ${USER_PICKUP}. Πατήστε 1 για να τη χρησιμοποιήσετε ή 2 για να δώσετε νέα διεύθυνση." "${FILEBASE}/user_prompt" "el-GR" "${WAV_GAIN}" "wav")
same => n,StopMusicOnHold()

same => n,Set(USER_PROMPT_SIZE=${STAT(s,${FILEBASE}/user_prompt.wav)})
same => n,System(echo "$(date) - ${LOG_PREFIX} User prompt TTS file size: ${USER_PROMPT_SIZE} bytes" >> "${FILEBASE}/log.txt")
same => n,GotoIf($[${USER_PROMPT_SIZE} < 100]?pickup_retry)  ; If TTS failed, continue normally
same => n,System(echo "$(date) - ${LOG_PREFIX} Reading user choice for existing address" >> "${FILEBASE}/log.txt")
same => n,Read(USER_CHOICE,${FILEBASE}/user_prompt,1,,${READ_MAX_RETRIES},10)
same => n,System(echo "$(date) - ${LOG_PREFIX} User choice received: ${USER_CHOICE}" >> "${FILEBASE}/log.txt")

same => n,GotoIf($["${USER_CHOICE}" = "1"]?use_default_address)
same => n,GotoIf($["${USER_CHOICE}" = "2"]?pickup_retry)
same => n,System(echo "$(date) - ${LOG_PREFIX} Invalid choice received: ${USER_CHOICE}" >> "${FILEBASE}/log.txt")
same => n,Playback(custom/invalid-v2)
same => n,Goto(name_retry)  ; Invalid choice, continue normally

same => n(use_default_address),System(echo "$(date) - ${LOG_PREFIX} User chose to use default address: ${USER_PICKUP}" >> "${FILEBASE}/log.txt")
same => n,Set(PICKUP_RESULT=${USER_PICKUP})
same => n,Set(PICKUP_RESULT_ADDR='')
same => n,Set(PICKUP_CLEAN=${SHELL(echo "${USER_PICKUP}" | tr -d '\n\r')})
same => n,System(${SAVE_JSON} "pickup" "${PICKUP_CLEAN}" "${FILEBASE}/progress.json")

; Construct the pickup location JSON from the extracted lat/lng values
same => n,System(echo "$(date) - ${LOG_PREFIX} Constructing pickup location JSON with lat: ${USER_LAT}, lng: ${USER_LNG}" >> "${FILEBASE}/log.txt")
same => n,Set(PICKUP_LOCATION_JSON={"latLng":{"lat": ${USER_LAT}, "lng": ${USER_LNG}}})
same => n,System(${SAVE_JSON} 'pickupLocation' '${PICKUP_LOCATION_JSON}' "${FILEBASE}/progress.json")
same => n,System(echo "$(date) - ${LOG_PREFIX} Using default address: ${USER_PICKUP}" >> "${FILEBASE}/log.txt")
same => n,System(echo "$(date) - ${LOG_PREFIX} Playing use default address confirmation" >> "${FILEBASE}/log.txt")
same => n,Playback(custom/confirm-default-address-v2)
same => n,Goto(dest)  ; Skip to destination since we have pickup address

; --- NAME (3 retries) ---
same => n(name_retry),Set(NAME_TRY=1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Starting name collection process" >> "${FILEBASE}/log.txt")
same => n(name_retry_loop),GotoIf($[${NAME_TRY} > ${MAX_RETRIES}]?fail)
same => n,System(echo "$(date) - ${LOG_PREFIX} Prompting for name - Attempt: ${NAME_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Playback(custom/give-name-v2)
same => n,System(echo "$(date) - ${LOG_PREFIX} Recording name - Attempt: ${NAME_TRY}" >> "${FILEBASE}/log.txt")
same => n,Record(${FILEBASE}/recordings/name_${NAME_TRY}.wav16,2,10)
same => n,System(echo "$(date) - ${LOG_PREFIX} Name recording ${NAME_TRY} completed" >> "${FILEBASE}/log.txt")
same => n,StartMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Starting STT processing for name - Attempt: ${NAME_TRY}" >> "${FILEBASE}/log.txt")
same => n,Set(NAME_RESULT=${SHELL(${STT_SCRIPT} "${FILEBASE}/recordings/name_${NAME_TRY}.wav16")})
same => n,System(echo "$(date) - ${LOG_PREFIX} STT result for name: ${NAME_RESULT}" >> "${FILEBASE}/log.txt")
same => n,StopMusicOnHold()
same => n,Wait(1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Validating name result: '${NAME_RESULT}'" >> "${FILEBASE}/log.txt")
same => n,Set(IS_NAME_OK=${SHELL(${VALIDATE_SCRIPT} "${NAME_RESULT}" | head -1 | tr -d '\n\r ')})
same => n,System(echo "$(date) - ${LOG_PREFIX} Name validation result: '${IS_NAME_OK}' for input: '${NAME_RESULT}'" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${IS_NAME_OK}" != "1"]?name_retry_inc)
same => n,System(echo "$(date) - ${LOG_PREFIX} Name successfully captured and validated: ${NAME_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Set(NAME_CLEAN=${SHELL(echo "${NAME_RESULT}" | tr -d '\n\r')})
same => n,System(${SAVE_JSON} "name" "${NAME_CLEAN}" "${FILEBASE}/progress.json")
same => n,System(echo "$(date) - ${LOG_PREFIX} Name successfully captured: ${NAME_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Goto(pickup)

same => n(name_retry_inc),Set(NAME_TRY=$[${NAME_TRY} + 1])
same => n,System(echo "$(date) - ${LOG_PREFIX} Name attempt failed. Incrementing to attempt: ${NAME_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Goto(name_retry_loop)

; --- PICKUP (3 retries) ---
same => n(pickup),Set(PICKUP_TRY=1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Starting pickup address collection process" >> "${FILEBASE}/log.txt")
same => n(pickup_retry),GotoIf($[${PICKUP_TRY} > ${MAX_RETRIES}]?fail)
same => n,System(echo "$(date) - ${LOG_PREFIX} Prompting for pickup address - Attempt: ${PICKUP_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Playback(custom/give-pickup-address-v2)
same => n(pickup_retry_np),System(echo "$(date) - ${LOG_PREFIX} Recording pickup address - Attempt: ${PICKUP_TRY}" >> "${FILEBASE}/log.txt")
same => n,Record(${FILEBASE}/recordings/pickup_${PICKUP_TRY}.wav16,2,10)
same => n,System(echo "$(date) - ${LOG_PREFIX} Pickup address recording completed" >> "${FILEBASE}/log.txt")
same => n,StartMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Starting STT processing for pickup address - Attempt: ${PICKUP_TRY}" >> "${FILEBASE}/log.txt")
same => n,Set(PICKUP_RESULT=${SHELL(${STT_SCRIPT} "${FILEBASE}/recordings/pickup_${PICKUP_TRY}.wav16")})
same => n,System(echo "$(date) - ${LOG_PREFIX} STT result for pickup: ${PICKUP_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Set(IS_PICKUP_OK=${SHELL(${VALIDATE_SCRIPT} "${PICKUP_RESULT}" | head -1 | tr -d '\n\r ')})
same => n,System(echo "$(date) - ${LOG_PREFIX} Pickup validation result: ${IS_PICKUP_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${IS_PICKUP_OK}" != "1"]?pickup_retry_inc)
same => n,System(echo "$(date) - ${LOG_PREFIX} Starting geolocation lookup for pickup: ${PICKUP_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Set(PICKUP_LOCATION_RESULT=${SHELL(${FETCH_LATLNG_SCRIPT} "1" "1" "${PICKUP_RESULT}")})
same => n,Set(ESCAPED_PICKUP_JSON=${SHELL_ESCAPE(${PICKUP_LOCATION_RESULT})})
same => n,System(echo "$(date) - ${LOG_PREFIX} Geolocation result for pickup: ${ESCAPED_PICKUP_JSON}" >> "${FILEBASE}/log.txt")
;same => n,Set(IS_PICKUP_LOCATION_OK=1)
same => n,Set(IS_PICKUP_LOCATION_OK=${SHELL(${VALIDATE_SCRIPT} '${PICKUP_LOCATION_RESULT}' | head -1 | tr -d '\n\r ')})
same => n,System(echo "$(date) - ${LOG_PREFIX} Pickup location validation result: ${IS_PICKUP_LOCATION_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${IS_PICKUP_LOCATION_OK}" != "1"]?pickup_retry_inc)
same => n,System(echo "$(date) - ${LOG_PREFIX} Pickup address and location successfully processed" >> "${FILEBASE}/log.txt")
same => n,StopMusicOnHold()
same => n,Wait(1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Saving pickup address to JSON" >> "${FILEBASE}/log.txt")
same => n,Set(PICKUP_CLEAN=${SHELL(echo "${PICKUP_RESULT}" | tr -d '\n\r')})
same => n,System(${SAVE_JSON} "pickup" "${PICKUP_CLEAN}" "${FILEBASE}/progress.json")
same => n,System(echo "$(date) - ${LOG_PREFIX} Saving pickup location to JSON" >> "${FILEBASE}/log.txt")
same => n,System(${SAVE_JSON} 'pickupLocation' '${PICKUP_LOCATION_RESULT}' "${FILEBASE}/progress.json")
same => n,GotoIf($["${ADD_MATCHED_ADDRESS_PICKUP}" != "1"]?skip_add_pickup_address)
same => n,Set(PICKUP_RESULT_ADDR=${SHELL(${READ_JSON} ${FILEBASE}/progress.json pickupLocation.address 1)})
same => n(skip_add_pickup_address),System(echo "$(date) - ${LOG_PREFIX} Completed saving pickup data" >> "${FILEBASE}/log.txt")
same => n,Goto(dest)

same => n(pickup_retry_inc),System(echo "$(date) - ${LOG_PREFIX} Pickup attempt failed. Before increment: ${PICKUP_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Set(PICKUP_TRY=$[${PICKUP_TRY} + 1])
same => n,System(echo "$(date) - ${LOG_PREFIX} Pickup attempt failed. Incrementing to attempt: ${PICKUP_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($[${PICKUP_TRY} > ${MAX_RETRIES}]?fail)
same => n,Playback(custom/invalid_address)
same => n,Goto(pickup_retry_np)

; --- DESTINATION (3 retries) ---
same => n(dest),Set(DEST_TRY=1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Starting destination address collection process" >> "${FILEBASE}/log.txt")

same => n(dest_retry),GotoIf($[${DEST_TRY} > ${MAX_RETRIES}]?fail)
same => n,System(echo "$(date) - ${LOG_PREFIX} Prompting for destination address - Attempt: ${DEST_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Playback(custom/give-dest-address-v3)
same => n,System(echo "$(date) - ${LOG_PREFIX} Recording destination address - Attempt: ${DEST_TRY}" >> "${FILEBASE}/log.txt")
same => n,Record(${FILEBASE}/recordings/dest_${DEST_TRY}.wav16,2,10)
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination address recording completed" >> "${FILEBASE}/log.txt")
same => n,StartMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Starting STT processing for destination address - Attempt: ${DEST_TRY}" >> "${FILEBASE}/log.txt")
same => n,Set(DEST_RESULT=${SHELL(${STT_SCRIPT} "${FILEBASE}/recordings/dest_${DEST_TRY}.wav16")})
same => n,Set(DEST_RESULT_SAY=${DEST_RESULT})
same => n,System(echo "$(date) - ${LOG_PREFIX} STT result for destination: ${DEST_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Set(IS_DEST_OK=${SHELL(${VALIDATE_SCRIPT} "${DEST_RESULT}" | head -1 | tr -d '\n\r ')})
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination validation result: ${IS_DEST_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${IS_DEST_OK}" != "1"]?dest_retry_inc)
same => n,System(echo "$(date) - ${LOG_PREFIX} Starting geolocation lookup for destination: ${DEST_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Set(DEST_LOCATION_RESULT=${SHELL(${FETCH_LATLNG_SCRIPT} "${VALIDATE_DESTINATION}" "0" "${DEST_RESULT}")})
same => n,Set(ESCAPED_DEST_JSON=${SHELL_ESCAPE(${DEST_LOCATION_RESULT})})
same => n,System(echo "$(date) - ${LOG_PREFIX} Geolocation result for destination: ${ESCAPED_DEST_JSON}" >> "${FILEBASE}/log.txt")

same => n,GotoIf($["${VALIDATE_DESTINATION}" == "0"]?skip_dest_location_check)
same => n,Set(IS_DEST_LOCATION_OK=${SHELL(${VALIDATE_SCRIPT} '${DEST_LOCATION_RESULT}' | head -1 | tr -d '\n\r ')})
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination location validation result: ${IS_DEST_LOCATION_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${VALIDATE_DESTINATION}" == "1"]?check_dest_result)
same => n,GotoIf($["${IS_DEST_LOCATION_OK}" != "0"]?skip_dest_location_check)
same => n,Set(DEST_RESULT=${INVALID_DESTINATION_NAME})
same => n,Set(IS_DEST_LOCATION_OK=1)
same => n,GotoIf($["${VALIDATE_DESTINATION}" == "2"]?skip_dest_location_check)
same => n(check_dest_result),GotoIf($["${IS_DEST_LOCATION_OK}" != "1"]?dest_retry_inc)

same => n(skip_dest_location_check),Set(IS_DEST_LOCATION_OK=1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination location validation result: ${IS_DEST_LOCATION_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${IS_DEST_LOCATION_OK}" != "1"]?dest_retry_inc)
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination address and location successfully processed" >> "${FILEBASE}/log.txt")
same => n,StopMusicOnHold()
same => n,Wait(1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Saving destination address to JSON" >> "${FILEBASE}/log.txt")
same => n,Set(DEST_CLEAN=${SHELL(echo "${DEST_RESULT}" | tr -d '\n\r')})
same => n,System(${SAVE_JSON} "destination" "${DEST_CLEAN}" "${FILEBASE}/progress.json")
same => n,System(echo "$(date) - ${LOG_PREFIX} Saving destination location to JSON" >> "${FILEBASE}/log.txt")
same => n,System(${SAVE_JSON} 'destinationLocation' '${DEST_LOCATION_RESULT}' "${FILEBASE}/progress.json")
same => n,System(echo "$(date) - ${LOG_PREFIX} Completed saving destination data" >> "${FILEBASE}/log.txt")
same => n,Goto(confirm)

same => n(dest_retry_inc),Set(DEST_TRY=$[${DEST_TRY} + 1])
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination attempt failed. Incrementing to attempt: ${DEST_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Goto(dest_retry)

; --- CONFIRM with 3 DTMF attempts ---
same => n(confirm),Set(CONFIRM_TRY=1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Starting confirmation process" >> "${FILEBASE}/log.txt")
same => n(confirm_loop),GotoIf($[${CONFIRM_TRY} > 3]?fail)
same => n,System(echo "$(date) - ${LOG_PREFIX} Confirmation attempt: ${CONFIRM_TRY}/3" >> "${FILEBASE}/log.txt")
same => n,StartMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Generating confirmation TTS with data: Name=${NAME_RESULT}, Pickup=${PICKUP_RESULT}, Dest=${DEST_RESULT}" >> "${FILEBASE}/log.txt")
same => n,System(${TTS_SCRIPT} "Παρακαλώ επιβεβαιώστε. Όνομα: ${NAME_RESULT}. Παραλαβή: ${PICKUP_RESULT}(${PICKUP_RESULT_ADDR}). Προορισμός: ${DEST_RESULT_SAY}" "${FILEBASE}/confirm" "el-GR" "${WAV_GAIN}" "wav")
same => n,StopMusicOnHold()

; Check if wav was created successfully
same => n,Set(CONFIRM_WAV_SIZE=${STAT(s,${FILEBASE}/confirm.wav)})
same => n,System(echo "$(date) - ${LOG_PREFIX} Confirmation audio file size: ${CONFIRM_WAV_SIZE} bytes" >> "${FILEBASE}/log.txt")
same => n,GotoIf($[${CONFIRM_WAV_SIZE} < 100]?confirm_wav_failed)
same => n,System(echo "$(date) - ${LOG_PREFIX} Playing confirmation audio" >> "${FILEBASE}/log.txt")
same => n,Playback(${FILEBASE}/confirm)
same => n,Goto(read_dtmf)

same => n(confirm_wav_failed),System(echo "$(date) - ${LOG_PREFIX} Confirmation audio generation failed" >> "${FILEBASE}/log.txt")
same => n(read_dtmf),System(echo "$(date) - ${LOG_PREFIX} Waiting for DTMF input" >> "${FILEBASE}/log.txt")
same => n,Read(DTMF_OPTION,custom/options-v3,1,,${READ_MAX_RETRIES},10)
same => n,System(echo "$(date) - ${LOG_PREFIX} User pressed DTMF: ${DTMF_OPTION}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${DTMF_OPTION}" = "0"]?do_register)
same => n,GotoIf($["${DTMF_OPTION}" = "1"]?name_retry_confirm)
same => n,GotoIf($["${DTMF_OPTION}" = "2"]?pickup_retry_confirm)
same => n,GotoIf($["${DTMF_OPTION}" = "3"]?dest_retry_confirm)
same => n,GotoIf($["${DTMF_OPTION}" = "4"]?goto_operator)
same => n,System(echo "$(date) - ${LOG_PREFIX} Invalid DTMF option received: ${DTMF_OPTION}" >> "${FILEBASE}/log.txt")
same => n,Playback(custom/invalid-v2)
same => n,Set(CONFIRM_TRY=$[${CONFIRM_TRY} + 1])
same => n,System(echo "$(date) - ${LOG_PREFIX} Invalid DTMF. Incrementing to attempt: ${CONFIRM_TRY}/3" >> "${FILEBASE}/log.txt")
same => n,Goto(confirm_loop)

; --- NAME retry from confirm ---
same => n(name_retry_confirm),Set(NAME_TRY=1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Retrying name collection from confirmation" >> "${FILEBASE}/log.txt")
same => n(name_retry_loop_confirm),GotoIf($[${NAME_TRY} > ${MAX_RETRIES}]?fail)
same => n,System(echo "$(date) - ${LOG_PREFIX} Name retry from confirm - Attempt: ${NAME_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Playback(custom/give-name-v2)
same => n,Record(${FILEBASE}/recordings/name_${NAME_TRY}.wav16,2,10)
same => n,StartMusicOnHold()
same => n,Set(NAME_RESULT=${SHELL(${STT_SCRIPT} "${FILEBASE}/recordings/name_${NAME_TRY}.wav16")})
same => n,System(echo "$(date) - ${LOG_PREFIX} Name retry STT result: ${NAME_RESULT}" >> "${FILEBASE}/log.txt")
same => n,StopMusicOnHold()
same => n,Set(IS_NAME_OK=${SHELL(${VALIDATE_SCRIPT} "${NAME_RESULT}" | head -1 | tr -d '\n\r ')})
same => n,System(echo "$(date) - ${LOG_PREFIX} Name retry validation result: ${IS_NAME_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${IS_NAME_OK}" != "1"]?name_retry_inc_confirm)
same => n,System(echo "$(date) - ${LOG_PREFIX} Name retry successful: ${NAME_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Set(NAME_CLEAN=${SHELL(echo "${NAME_RESULT}" | tr -d '\n\r')})
same => n,System(${SAVE_JSON} "name" "${NAME_CLEAN}" "${FILEBASE}/progress.json")
same => n,System(echo "$(date) - ${LOG_PREFIX} Name retry successful: ${NAME_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Goto(confirm)

same => n(name_retry_inc_confirm),Set(NAME_TRY=$[${NAME_TRY} + 1])
same => n,System(echo "$(date) - ${LOG_PREFIX} Name retry failed. Incrementing to attempt: ${NAME_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Goto(name_retry_loop_confirm)


; --- PICKUP retry from confirm --- (FIXED with proper JSON handling)
same => n(pickup_retry_confirm),Set(PICKUP_TRY=1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Retrying pickup collection from confirmation" >> "${FILEBASE}/log.txt")
same => n(pickup_retry_loop_confirm),GotoIf($[${PICKUP_TRY} > ${MAX_RETRIES}]?fail)
same => n,System(echo "$(date) - ${LOG_PREFIX} Pickup retry from confirm - Attempt: ${PICKUP_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Playback(custom/give-pickup-address-v2)
same => n,Record(${FILEBASE}/recordings/pickup_${PICKUP_TRY}.wav16,2,10)
same => n,StartMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Processing pickup retry STT" >> "${FILEBASE}/log.txt")
same => n,Set(PICKUP_RESULT=${SHELL(${STT_SCRIPT} "${FILEBASE}/recordings/pickup_${PICKUP_TRY}.wav16")})
same => n,System(echo "$(date) - ${LOG_PREFIX} Pickup retry STT result: ${PICKUP_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Set(IS_PICKUP_OK=${SHELL(${VALIDATE_SCRIPT} "${PICKUP_RESULT}" | head -1 | tr -d '\n\r ')})
same => n,System(echo "$(date) - ${LOG_PREFIX} Pickup retry validation result: ${IS_PICKUP_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${IS_PICKUP_OK}" != "1"]?pickup_retry_inc_confirm)

same => n,System(echo "$(date) - ${LOG_PREFIX} Processing pickup retry geolocation" >> "${FILEBASE}/log.txt")
; Save location result to temporary file to preserve JSON formatting
same => n,System(${FETCH_LATLNG_SCRIPT} "1" "1" "${PICKUP_RESULT}" > "${FILEBASE}/temp_pickup_location.json")
same => n,Set(PICKUP_LOCATION_RESULT=${SHELL(cat "${FILEBASE}/temp_pickup_location.json")})
same => n,Set(ESCAPED_PICKUP_JSON=${SHELL_ESCAPE(${PICKUP_LOCATION_RESULT})})
same => n,System(echo "$(date) - ${LOG_PREFIX} Pickup retry location result: ${ESCAPED_PICKUP_JSON}" >> "${FILEBASE}/log.txt")
same => n,Set(IS_PICKUP_LOCATION_OK=1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Pickup retry location validation: ${IS_PICKUP_LOCATION_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${IS_PICKUP_LOCATION_OK}" != "1"]?pickup_retry_inc_confirm)

same => n,StopMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Pickup retry successful: ${PICKUP_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Set(PICKUP_CLEAN=${SHELL(echo "${PICKUP_RESULT}" | tr -d '\n\r')})
same => n,System(${SAVE_JSON} "pickup" "${PICKUP_CLEAN}" "${FILEBASE}/progress.json")
; Use file-based approach for JSON location data
same => n,System(${SAVE_JSON} "pickupLocation" "$(cat ${FILEBASE}/temp_pickup_location.json)" "${FILEBASE}/progress.json")
same => n,System(rm -f "${FILEBASE}/temp_pickup_location.json")
same => n,System(echo "$(date) - ${LOG_PREFIX} Pickup retry completed successfully" >> "${FILEBASE}/log.txt")
same => n,Goto(confirm)

same => n(pickup_retry_inc_confirm),Set(PICKUP_TRY=$[${PICKUP_TRY} + 1])
same => n,System(echo "$(date) - ${LOG_PREFIX} Pickup retry failed. Incrementing to attempt: ${PICKUP_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Goto(pickup_retry_loop_confirm)

; --- DEST retry from confirm --- (FIXED with proper JSON handling)
same => n(dest_retry_confirm),Set(DEST_TRY=1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Retrying destination collection from confirmation" >> "${FILEBASE}/log.txt")
same => n(dest_retry_loop_confirm),GotoIf($[${DEST_TRY} > ${MAX_RETRIES}]?fail)
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry from confirm - Attempt: ${DEST_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Playback(custom/give-dest-address-v3)
same => n,Record(${FILEBASE}/recordings/dest_${DEST_TRY}.wav16,2,10)
same => n,StartMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Processing destination retry STT" >> "${FILEBASE}/log.txt")
same => n,Set(DEST_RESULT=${SHELL(${STT_SCRIPT} "${FILEBASE}/recordings/dest_${DEST_TRY}.wav16")})
same => n,Set(DEST_RESULT_SAY=${DEST_RESULT})
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry STT result: ${DEST_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Set(IS_DEST_OK=${SHELL(${VALIDATE_SCRIPT} "${DEST_RESULT}" | head -1 | tr -d '\n\r ')})
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry validation result: ${IS_DEST_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${IS_DEST_OK}" != "1"]?dest_retry_inc_confirm)

same => n,System(echo "$(date) - ${LOG_PREFIX} Processing destination retry geolocation" >> "${FILEBASE}/log.txt")
; Save location result to temporary file to preserve JSON formatting
same => n,System(${FETCH_LATLNG_SCRIPT} "${VALIDATE_DESTINATION}" "0" "${DEST_RESULT}" > "${FILEBASE}/temp_dest_location.json")
same => n,Set(DEST_LOCATION_RESULT=${SHELL(cat "${FILEBASE}/temp_dest_location.json")})
same => n,Set(ESCAPED_DEST_JSON=${SHELL_ESCAPE(${DEST_LOCATION_RESULT})})
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry location result: ${ESCAPED_DEST_JSON}" >> "${FILEBASE}/log.txt")

same => n,GotoIf($["${VALIDATE_DESTINATION}" == "0"]?skip_dest_location_check_confirm)
same => n,Set(IS_DEST_LOCATION_OK=${SHELL(${VALIDATE_SCRIPT} '${DEST_LOCATION_RESULT}' | head -1 | tr -d '\n\r ')})
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination location validation result: ${IS_DEST_LOCATION_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${VALIDATE_DESTINATION}" == "1"]?check_dest_result_confirm)
same => n,GotoIf($["${IS_DEST_LOCATION_OK}" != "0"]?skip_dest_location_check_confirm)
same => n,Set(DEST_RESULT=${INVALID_DESTINATION_NAME})
same => n,Set(IS_DEST_LOCATION_OK=1)
same => n,GotoIf($["${VALIDATE_DESTINATION}" == "2"]?skip_dest_location_check_confirm)
same => n(check_dest_result),GotoIf($["${IS_DEST_LOCATION_OK}" != "1"]?dest_retry_inc)

same => n(skip_dest_location_check_confirm),Set(IS_DEST_LOCATION_OK=1)

same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry location validation: ${IS_DEST_LOCATION_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${IS_DEST_LOCATION_OK}" != "1"]?dest_retry_inc_confirm)

same => n,StopMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry successful: ${DEST_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Set(DEST_CLEAN=${SHELL(echo "${DEST_RESULT}" | tr -d '\n\r')})
same => n,System(${SAVE_JSON} "destination" "${DEST_CLEAN}" "${FILEBASE}/progress.json")
; Use file-based approach for JSON location data
same => n,System(${SAVE_JSON} "destinationLocation" "$(cat ${FILEBASE}/temp_dest_location.json)" "${FILEBASE}/progress.json")
same => n,System(rm -f "${FILEBASE}/temp_dest_location.json")
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry completed successfully" >> "${FILEBASE}/log.txt")
same => n,Goto(confirm)

same => n(dest_retry_inc_confirm),Set(DEST_TRY=$[${DEST_TRY} + 1])
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry failed. Incrementing to attempt: ${DEST_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Goto(dest_retry_loop_confirm)

; --- DEST retry from confirm --- 
same => n(dest_retry_confirm),Set(DEST_TRY=1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Retrying destination collection from confirmation" >> "${FILEBASE}/log.txt")
same => n(dest_retry_loop_confirm),GotoIf($[${DEST_TRY} > ${MAX_RETRIES}]?fail)
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry from confirm - Attempt: ${DEST_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Playback(custom/give-dest-address-v2)
same => n,Record(${FILEBASE}/recordings/dest_${DEST_TRY}.wav16,2,10)
same => n,StartMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Processing destination retry STT" >> "${FILEBASE}/log.txt")
same => n,Set(DEST_RESULT=${SHELL(${STT_SCRIPT} "${FILEBASE}/recordings/dest_${DEST_TRY}.wav16")})
same => n,Set(DEST_RESULT_SAY=${DEST_RESULT})
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry STT result: ${DEST_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Set(IS_DEST_OK=${SHELL(${VALIDATE_SCRIPT} "${DEST_RESULT}" | head -1 | tr -d '\n\r ')})
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry validation result: ${IS_DEST_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${IS_DEST_OK}" != "1"]?dest_retry_inc_confirm)

same => n,System(echo "$(date) - ${LOG_PREFIX} Processing destination retry geolocation" >> "${FILEBASE}/log.txt")
same => n,Set(DEST_LOCATION_RESULT=${SHELL(${FETCH_LATLNG_SCRIPT} "${DEST_RESULT}")})
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry location result: ${DEST_LOCATION_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Set(IS_DEST_LOCATION_OK=1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry location validation: ${IS_DEST_LOCATION_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${IS_DEST_LOCATION_OK}" != "1"]?dest_retry_inc_confirm)

same => n,StopMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry successful: ${DEST_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Set(DEST_CLEAN=${SHELL(echo "${DEST_RESULT}" | tr -d '\n\r')})
same => n,System(${SAVE_JSON} "destination" "${DEST_CLEAN}" "${FILEBASE}/progress.json")
same => n,System(${SAVE_JSON} "destinationLocation" "${DEST_LOCATION_RESULT}" "${FILEBASE}/progress.json")
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry completed successfully" >> "${FILEBASE}/log.txt")
same => n,Goto(confirm)

same => n(dest_retry_inc_confirm),Set(DEST_TRY=$[${DEST_TRY} + 1])
same => n,System(echo "$(date) - ${LOG_PREFIX} Destination retry failed. Incrementing to attempt: ${DEST_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Goto(dest_retry_loop_confirm)

; --- REGISTER ---
same => n(do_register),StartMusicOnHold()
same => n,GotoIf($["${RESERVATION_REQUEST}" = "1"]?reservation)
same => n(do_register_from_reservation),System(echo "$(date) - ${LOG_PREFIX} Starting ride registration process" >> "${FILEBASE}/log.txt")
same => n,System(echo "$(date) - ${LOG_PREFIX} Executing registration script with data from: ${FILEBASE}/progress.json" >> "${FILEBASE}/log.txt")
same => n,System(${REGISTER_SCRIPT} ${FILEBASE}/progress.json ${FILEBASE} > "${FILEBASE}/reg_output.txt" 2> "${FILEBASE}/reg_error.txt")
same => n,Set(REG_RESULT=${SHELL(cat "${FILEBASE}/reg_output.txt")})
same => n,System(echo "$(date) - ${LOG_PREFIX} Registration stdout: $(cat ${FILEBASE}/reg_output.txt)" >> "${FILEBASE}/log.txt")
same => n,System(echo "$(date) - ${LOG_PREFIX} Registration stderr: $(cat ${FILEBASE}/reg_error.txt)" >> "${FILEBASE}/log.txt")
same => n,Set(ESCAPED_REG_RESULT=${SHELL_ESCAPE(${REG_RESULT})})
same => n,System(echo "$(date) - ${LOG_PREFIX} Registration result: ${ESCAPED_REG_RESULT}" >> "${FILEBASE}/log.txt")

; Extract JSON fields from registration result
same => n,Set(REG_MSG=${SHELL(${EXTRACT_JSON_SCRIPT} '${REG_RESULT}' 'msg')})
same => n,Set(CALL_OPERATOR_RAW=${SHELL(${EXTRACT_JSON_SCRIPT} '${REG_RESULT}' 'callOperator')})
same => n,Set(CALL_OPERATOR=${SHELL(echo "${CALL_OPERATOR_RAW}" | tr -d '\n\r ' | tr '[:upper:]' '[:lower:]')})
same => n,System(echo "$(date) - ${LOG_PREFIX} Extracted msg: ${REG_MSG}" >> "${FILEBASE}/log.txt")
same => n,System(echo "$(date) - ${LOG_PREFIX} Raw callOperator: '${CALL_OPERATOR_RAW}'" >> "${FILEBASE}/log.txt")
same => n,System(echo "$(date) - ${LOG_PREFIX} Cleaned callOperator: '${CALL_OPERATOR}'" >> "${FILEBASE}/log.txt")

same => n,StopMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Generating registration confirmation TTS" >> "${FILEBASE}/log.txt")
same => n,System(${TTS_SCRIPT} "${REG_MSG}" "${FILEBASE}/register" "el-GR" "${WAV_GAIN}" "wav")

; Check if wav was created successfully
same => n,Set(REGISTER_WAV_SIZE=${STAT(s,${FILEBASE}/register.wav)})
same => n,System(echo "$(date) - ${LOG_PREFIX} Registration audio file size: ${REGISTER_WAV_SIZE} bytes" >> "${FILEBASE}/log.txt")
same => n,GotoIf($[${REGISTER_WAV_SIZE} < 100]?registration_tts_failed)

same => n,System(echo "$(date) - ${LOG_PREFIX} Playing registration confirmation audio" >> "${FILEBASE}/log.txt")
same => n,Playback(${FILEBASE}/register)

; Check callOperator flag and route accordingly
same => n,GotoIf($["${CALL_OPERATOR}" = "true"]?goto_operator)
same => n,Goto(end)

same => n(registration_tts_failed),System(echo "$(date) - ${LOG_PREFIX} Registration TTS generation failed" >> "${FILEBASE}/log.txt")
; Check callOperator flag even if TTS failed
same => n,GotoIf($["${CALL_OPERATOR}" = "true"]?goto_operator)
same => n,Goto(end)

same => n(end),System(echo "$(date) - ${LOG_PREFIX} Call ending normally - Registration completed successfully" >> "${FILEBASE}/log.txt")
same => n,Wait(1)
same => n,Hangup()

; --- RESERVATION ---
same => n(reservation),Set(RESERVATION_TRY=1)
same => n,System(echo "$(date) - ${LOG_PREFIX} Starting ReservationTime collection process" >> "${FILEBASE}/log.txt")
same => n(reservation_retry_loop),GotoIf($[${RESERVATION_TRY} > ${MAX_RETRIES}]?fail)
same => n,System(echo "$(date) - ${LOG_PREFIX} Prompting for reservation - Attempt: ${RESERVATION_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Playback(custom/rantevou_ask_time)
same => n,System(echo "$(date) - ${LOG_PREFIX} Recording reservation - Attempt: ${RESERVATION_TRY}" >> "${FILEBASE}/log.txt")
same => n,Record(${FILEBASE}/recordings/reservation_${RESERVATION_TRY}.wav16,2,10)
same => n,System(echo "$(date) - ${LOG_PREFIX} RESERVATION recording ${RESERVATION_TRY} completed" >> "${FILEBASE}/log.txt")
same => n,StartMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Starting STT processing for reservation - Attempt: ${RESERVATION_TRY}" >> "${FILEBASE}/log.txt")
same => n,Set(RESEVATION_RESULT=${SHELL(${STT_SCRIPT} "${FILEBASE}/recordings/reservation_${RESERVATION_TRY}.wav16")})
same => n,System(echo "$(date) - ${LOG_PREFIX} STT result for pickup: ${PICKUP_RESULT}" >> "${FILEBASE}/log.txt")
same => n,Set(IS_RESEVATION_OK=${SHELL(${VALIDATE_SCRIPT} "${RESEVATION_RESULT}" | head -1 | tr -d '\n\r ')})
same => n,System(echo "$(date) - ${LOG_PREFIX} reservation validation result: ${IS_RESEVATION_OK}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($["${IS_RESEVATION_OK}" != "1"]?reservation_retry_inc)
same => n,System(echo "$(date) - ${LOG_PREFIX} Starting fetching time from text for pickup: ${RESEVATION_RESULT}" >> "${FILEBASE}/log.txt")
same => n,System(${DATE_PARSE_SCRIPT} "${RESEVATION_RESULT}" > "${FILEBASE}/temp_reservation.json")
same => n,Set(RESEVATION_DATE_PROMPT=${SHELL(${READ_JSON} ${FILEBASE}/temp_reservation.json formattedBestMatch)})
same => n,Set(RESEVATION_DATE_STAMP=${SHELL(${READ_JSON} ${FILEBASE}/temp_reservation.json bestMatchUnixTimestamp)})
same => n,StopMusicOnHold()
same => n,Wait(1)
same => n,GotoIf($["${RESEVATION_DATE_PROMPT}" == ""]?reservation_retry_inc)  
same => n,StartMusicOnHold()
same => n,System(echo "$(date) - ${LOG_PREFIX} Generating confirmation TTS with date: Dest=${RESEVATION_DATE_PROMPT}" >> "${FILEBASE}/log.txt")
same => n,System(${TTS_SCRIPT} "Το ραντεβού είναι για ${RESEVATION_DATE_PROMPT}, πατήστε 0 για επιβεβαίωση ή 1 για να προσπαθήσετε ξανά" "${FILEBASE}/confirmdate" "el-GR" "${WAV_GAIN}" "wav")
same => n,StopMusicOnHold()
; Check if wav was created successfully
same => n,Set(CONFIRM_WAV_SIZE=${STAT(s,${FILEBASE}/confirmdate.wav)})
same => n,System(echo "$(date) - ${LOG_PREFIX} Confirmation audio file size: ${CONFIRM_WAV_SIZE} bytes" >> "${FILEBASE}/log.txt")
same => n,GotoIf($[${CONFIRM_WAV_SIZE} < 100]?confirm_wav_failed)
same => n,System(echo "$(date) - ${LOG_PREFIX} Playing confirmation audio" >> "${FILEBASE}/log.txt")
;same => n,Playback(${FILEBASE}/confirmdate)
same => n,Read(DTMF_OPTION,${FILEBASE}/confirmdate,1,,${READ_MAX_RETRIES},10)
same => n,GotoIf($["${DTMF_OPTION}" = "0"]?do_reservation_register)
same => n,Goto(reservation_retry_loop)

same => n(do_reservation_register),System(echo "$(date) - ${LOG_PREFIX} Reservation validation successfully processed" >> "${FILEBASE}/log.txt")
same => n,System(echo "$(date) - ${LOG_PREFIX} Saving reservation time to JSON" >> "${FILEBASE}/log.txt")
same => n,System(${SAVE_JSON} "reservation" "${RESEVATION_DATE_PROMPT}" "${FILEBASE}/progress.json")
same => n,System(${SAVE_JSON} "reservationStamp" "${RESEVATION_DATE_STAMP}" "${FILEBASE}/progress.json")
same => n,Goto(do_register_from_reservation)

same => n(reservation_retry_inc),System(echo "$(date) - ${LOG_PREFIX} reservation attempt failed. Before increment: ${RESERVATION_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,Set(RESERVATION_TRY=$[${RESERVATION_TRY} + 1])
same => n,System(echo "$(date) - ${LOG_PREFIX} reservation attempt failed. Incrementing to attempt: ${RESERVATION_TRY}/${MAX_RETRIES}" >> "${FILEBASE}/log.txt")
same => n,GotoIf($[${RESERVATION_TRY} > ${MAX_RETRIES}]?fail)
same => n,Goto(reservation_retry_loop)


; --- FAIL PATH ---
same => n(fail),System(echo "$(date) - ${LOG_PREFIX} Call failed after maximum retries reached" >> "${FILEBASE}/log.txt")
same => n,Playback(custom/invalid-v3)
same => n,System(echo "$(date) - ${LOG_PREFIX} Transferring call to operator " >> "${FILEBASE}/log.txt")
same => n,Dial(${PHONE_TO_CALL},20)
same => n,System(echo "$(date) - ${LOG_PREFIX} Call terminated after operator transfer attempt" >> "${FILEBASE}/log.txt")
same => n,Hangup()

; --- anonymous Handling
same => n(anonymous),System(echo "$(date) - ${LOG_PREFIX} Anonymous call detected, transferring to operator" >> "${FILEBASE}/log.txt")
same => n,Playback(custom/anonymous-v2)
same => n(goto_operator),Dial(${PHONE_TO_CALL},20)
same => n,System(echo "$(date) - ${LOG_PREFIX} Call terminated after operator transfer" >> "${FILEBASE}/log.txt")
same => n,Hangup()



